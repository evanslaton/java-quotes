/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.*;

public class AppTest {
//    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
//    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
//    private final PrintStream originalOut = System.out;
//    private final PrintStream originalErr = System.err;
//
//    @Before
//    public void setUpStreams() {
//        System.setOut(new PrintStream(outContent));
//        System.setErr(new PrintStream(errContent));
//    }
//
//    @After
//    public void restoreStreams() {
//        System.setOut(originalOut);
//        System.setErr(originalErr);
//    }

    @Test public void testToString() {
        String[] tags = {"Hi"};
        Quote quote = new Quote(tags, "Author", "Likes", "text");
        assertEquals("text --Author", quote.toString());

        quote = new Quote(tags, "Shakespeare", "Likes", "To be or not");
        assertEquals("To be or not --Shakespeare", quote.toString());
    }

    @Test public void testGetRandom() {
        int num = App.getRandom(10);
        assertTrue("Expect to be in rage of 10", 0 <= num  && num<= 10);
        num = App.getRandom(10);
        assertTrue("Expect to be in rage of 10", 0 <= num  && num<= 10);
        num = App.getRandom(10);
        assertTrue("Expect to be in rage of 10", 0 <= num  && num<= 10);

        num = App.getRandom(200);
        assertTrue("Expect to be in rage of 200", 0 <= num  && num<= 200);
        num = App.getRandom(200);
        assertTrue("Expect to be in rage of 200", 0 <= num  && num<= 200);
        num = App.getRandom(200);
        assertTrue("Expect to be in rage of 200", 0 <= num  && num<= 200);
    }

    @Test public void testReadFile() {
        Quote[] quotes = App.readFile();
        assertTrue("Should be greater than 0", quotes.length > 0);
        assertFalse("Should not be null", quotes == null);
    }

    @Test public void testSearchAuthor(){
        Quote[] quotes = App.readFile();
        assertEquals("123 not found.", Quote.searchAuthor(quotes, "123"));
        assertEquals(" “build a”  --Judy Yogev", Quote.searchAuthor(quotes, "Judy Yogev"));
        assertEquals(" “build a”  --Judy Yogev", Quote.searchAuthor(quotes, "Judy"));
    }

    @Test public void testSearchContains() {
        Quote[] quotes = App.readFile();
        assertTrue("Expect to get something with 'and'", Quote.searchContains(quotes, "and").contains("and"));
        assertEquals("nvjenrvijfnjvdfniv not found.", Quote.searchContains(quotes, "nvjenrvijfnjvdfniv"));
    }
}
